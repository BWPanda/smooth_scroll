<?php

/**
 * @file
 * The smooth_scrolling module allows parts of the site to stay on the page when
 * scrolling.
 */

/**
 * Implements hook_init().
 */
function smooth_scrolling_init() {
  $smooth_scrolling = variable_get('smooth_scrolling', array());

  //Only load the javascript if smooth scrollings have been configured.
  if (count($smooth_scrolling)) {
    drupal_add_js(array('smooth_scrolling' => $smooth_scrolling), array('type' => 'setting', 'scope' => JS_DEFAULT));
    drupal_add_js(drupal_get_path('module', 'smooth_scrolling') . '/smooth_scrolling.js');
  }
}

/**
 * Implements hook_menu().
 */
function smooth_scrolling_menu() {
  $items = array();
  $items['admin/config/user-interface/smooth-scrolling'] = array(
    'title' => 'Smooth scrolling',
    'description' => 'Configure smooth scrolling.',
    'access arguments' => array('administer site configuration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('smooth_scrolling_admin'),
    'file' => 'smooth_scrolling.admin.inc'
  );
  return $items;
}

/**
 * Implements hook_help().
 */
function smooth_scrolling_help($path, $arg) {
  // Remind site administrators about the {node_access} table being flagged
  // for rebuild. We don't need to issue the message on the confirm form, or
  // while the rebuild is being processed.
  if ($path != 'admin/reports/status/rebuild' && $path != 'batch' && strpos($path, '#') === FALSE
      && user_access('access administration pages') && node_access_needs_rebuild()) {
    if ($path == 'admin/reports/status') {
      $message = t('The content access permissions need to be rebuilt.');
    }
    else {
      $message = t('The content access permissions need to be rebuilt. <a href="@node_access_rebuild">Rebuild permissions</a>.', array('@node_access_rebuild' => url('admin/reports/status/rebuild')));
    }
    drupal_set_message($message, 'error');
  }

  switch ($path) {
    case 'admin/help#smooth_scrolling':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The Floating block module allows you to keep html blocks, selected using jquery selectors in a fixed position on the page as you scroll. It works in a similar way the table header fixer in Drupal Core. This means that when the user scrolls their browser selected parts of the page can stay in the users view. This is extremely useful when you have pages with lots of content and you want a side menu to stay in view.') . '</p>';
      return $output;
    case 'admin/config/user-interface/scrolling-block':
      $output = '<h3>' . t('How to configure a smooth scrolling') . '</h3>';
      $output .= '<p>' . t('Use the textbox below a smooth scrolling configurations, one per line. See below for example configurations:') . '</p>';
      $output .= '<dl>';
      $output .= '<dt>' . t('<code>#sidebar-left</code>') . '</dt>';
      $output .= '<dd>' . t('Using the jQuery selector #sidebar-left scroll the left sidebar. The selector will depend on your chosen theme. The selector can be any valid <a href="@jquery_selector_url">jQuery selector</a>.', array('@jquery_selector_url' => 'http://api.jquery.com/category/selectors/')) . '</dd>';
      $output .= '<dt>' . t('<code>#sidebar-left|padding_top=8,padding_bottom=4</code>') . '</dt>';
      $output .= '<dd>' . t('Float the left sidebar. Once the block is scrollingthe top will be offset 8px from the top of the page and if the smooth scrolling comes near the bottom of the page it will be offset 4px from the bottom of the page.') . '</dd>';
      $output .= '<dt>' . t('<code>#sidebar-left|container=#main</code>') . '</dt>';
      $output .= '<dd>' . t('Float the left sidebar within a container in your theme called <code>#main</code>') . '</dd>';
      return $output;
  }
}
